name: Deploy ChopperTracker

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: "958933162000"  # Main account - ChopperTracker resources tagged for cost tracking
  
  # Tagging for cost tracking and resource management
  PROJECT_TAG: "ChopperTracker"
  ENVIRONMENT_TAG: "Production"
  OWNER_TAG: "ChopperTracker"
  APPLICATION_TAG: "flight-tracking"
  MANAGED_BY_TAG: "GitHub-Actions"
  COST_CENTER_TAG: "ChopperTracker"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Verify AWS Account and Check Existing Resources
      run: |
        echo "Current AWS Account:"
        aws sts get-caller-identity
        echo "Expected Account ID: $AWS_ACCOUNT_ID"
        CURRENT_ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
        CURRENT_USER=$(aws sts get-caller-identity --query Arn --output text | cut -d'/' -f2)
        echo "Current Account ID: $CURRENT_ACCOUNT"
        echo "Current User: $CURRENT_USER"
        echo "✓ Confirmed deployment to main account with ChopperTracker tagging ($CURRENT_ACCOUNT)"
        
        # Check what ChopperTracker resources exist
        echo ""
        echo "Checking for existing ChopperTracker resources in main account..."
        echo "S3 Buckets:"
        aws s3 ls 2>/dev/null | grep chopper || echo "  No choppertracker buckets found"
        echo ""
        echo "ECR Repositories:" 
        aws ecr describe-repositories 2>/dev/null | jq -r '.repositories[].repositoryName' | grep chopper || echo "  No choppertracker repositories found"
        echo ""
        echo "ECS Clusters:"
        aws ecs list-clusters 2>/dev/null | jq -r '.clusterArns[]' | grep chopper || echo "  No choppertracker clusters found"
        echo ""
        echo "Load Balancers:"
        aws elbv2 describe-load-balancers 2>/dev/null | jq -r '.LoadBalancers[].LoadBalancerName' | grep chopper || echo "  No choppertracker load balancers found"

    - name: Setup ECR Repository
      run: |
        echo "🐳 Setting up ECR repository with tagging..."
        ECR_REPO="choppertracker-backend"
        
        # Create ECR repository if it doesn't exist
        if ! aws ecr describe-repositories --repository-names $ECR_REPO 2>/dev/null; then
          echo "Creating ECR repository: $ECR_REPO"
          aws ecr create-repository \
            --repository-name $ECR_REPO \
            --region $AWS_REGION \
            --tags Key=Project,Value=$PROJECT_TAG \
                   Key=Environment,Value=$ENVIRONMENT_TAG \
                   Key=Owner,Value=$OWNER_TAG \
                   Key=Application,Value=$APPLICATION_TAG \
                   Key=ManagedBy,Value=$MANAGED_BY_TAG \
                   Key=CostCenter,Value=$COST_CENTER_TAG
        else
          echo "ECR repository already exists: $ECR_REPO"
          # Add tags to existing repository
          aws ecr tag-resource \
            --resource-arn "arn:aws:ecr:${AWS_REGION}:${AWS_ACCOUNT_ID}:repository/${ECR_REPO}" \
            --tags Key=Project,Value=$PROJECT_TAG \
                   Key=Environment,Value=$ENVIRONMENT_TAG \
                   Key=Owner,Value=$OWNER_TAG \
                   Key=Application,Value=$APPLICATION_TAG \
                   Key=ManagedBy,Value=$MANAGED_BY_TAG \
                   Key=CostCenter,Value=$COST_CENTER_TAG
        fi
        
        # Test ECR login
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
        echo "✅ ECR setup complete with ChopperTracker tagging"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install frontend dependencies
      working-directory: ./FrontEnd
      run: npm ci

    - name: Build frontend
      working-directory: ./FrontEnd
      env:
        VITE_API_BASE_URL: https://api.choppertracker.com
      run: npm run build

    - name: Deploy frontend to S3
      run: |
        # Use ChopperTracker S3 bucket with proper tagging
        BUCKET_NAME="choppertracker-frontend"
        echo "Using S3 bucket: $BUCKET_NAME"
        
        # Debug: Show current identity and test access
        echo "Current AWS identity:"
        aws sts get-caller-identity
        echo "Using bucket: $BUCKET_NAME"
        
        # Create bucket if it doesn't exist
        if ! aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
          echo "Bucket does not exist, creating it with ChopperTracker tagging..."
          aws s3api create-bucket --bucket $BUCKET_NAME --region $AWS_REGION
          
          # Add comprehensive tags to S3 bucket
          aws s3api put-bucket-tagging --bucket $BUCKET_NAME --tagging \
            'TagSet=[
              {Key=Project,Value='$PROJECT_TAG'},
              {Key=Environment,Value='$ENVIRONMENT_TAG'},
              {Key=Owner,Value='$OWNER_TAG'},
              {Key=Application,Value='$APPLICATION_TAG'},
              {Key=ManagedBy,Value='$MANAGED_BY_TAG'},
              {Key=CostCenter,Value='$COST_CENTER_TAG'},
              {Key=Component,Value=Frontend}
            ]'
          
          # Remove public access block to allow public policies
          aws s3api delete-public-access-block --bucket $BUCKET_NAME || echo "No public access block to remove"
          
          # Configure for static website
          aws s3api put-bucket-website \
            --bucket $BUCKET_NAME \
            --website-configuration '{
              "IndexDocument": {"Suffix": "index.html"},
              "ErrorDocument": {"Key": "error.html"}
            }'
          
          # Set bucket policy for public read
          aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy '{
            "Version": "2012-10-17",
            "Statement": [{
              "Sid": "PublicReadGetObject",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::'$BUCKET_NAME'/*"
            }]
          }'
          
          # Disable ACLs
          aws s3api put-bucket-ownership-controls \
            --bucket $BUCKET_NAME \
            --ownership-controls 'Rules=[{ObjectOwnership=BucketOwnerEnforced}]'
            
          echo "✅ Created and configured S3 bucket with ChopperTracker tagging"
        else
          echo "✅ Bucket already exists, ensuring proper tagging..."
          # Add tags to existing bucket
          aws s3api put-bucket-tagging --bucket $BUCKET_NAME --tagging \
            'TagSet=[
              {Key=Project,Value='$PROJECT_TAG'},
              {Key=Environment,Value='$ENVIRONMENT_TAG'},
              {Key=Owner,Value='$OWNER_TAG'},
              {Key=Application,Value='$APPLICATION_TAG'},
              {Key=ManagedBy,Value='$MANAGED_BY_TAG'},
              {Key=CostCenter,Value='$COST_CENTER_TAG'},
              {Key=Component,Value=Frontend}
            ]'
        fi
        
        # Upload files to bucket
        echo "Uploading frontend files to S3..."
        aws s3 sync ./FrontEnd/dist s3://$BUCKET_NAME \
          --delete \
          --cache-control "public, max-age=3600" \
          --cli-read-timeout 0 \
          --cli-connect-timeout 60

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install backend dependencies
      run: |
        cd BackEnd
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Deploy ECS Fargate Infrastructure
      run: |
        # Use existing default VPC to avoid VPC limits
        echo "Using existing default VPC..."
        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
        
        # Get existing subnets in default VPC
        SUBNET1_ID=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=availability-zone,Values=us-east-1a" --query 'Subnets[0].SubnetId' --output text)
        SUBNET2_ID=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=availability-zone,Values=us-east-1b" --query 'Subnets[0].SubnetId' --output text)
        
        # Fallback to any available subnets if specific AZs not found
        if [ "$SUBNET1_ID" = "None" ] || [ "$SUBNET2_ID" = "None" ]; then
          echo "Using any available subnets in default VPC..."
          SUBNETS=($(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[].SubnetId' --output text))
          SUBNET1_ID=${SUBNETS[0]}
          SUBNET2_ID=${SUBNETS[1]:-${SUBNETS[0]}}
        fi
        
        echo "Using VPC: $VPC_ID"
        echo "Using Subnets: $SUBNET1_ID, $SUBNET2_ID"
        
        # Create or get ChopperTracker security groups with proper tagging
        echo "Setting up ChopperTracker security groups with tagging..."
        
        # ALB Security Group
        ALB_SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=choppertracker-alb-sg" "Name=vpc-id,Values=$VPC_ID" --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "None")
        if [ "$ALB_SG_ID" = "None" ]; then
          ALB_SG_ID=$(aws ec2 create-security-group \
            --group-name choppertracker-alb-sg \
            --description "ChopperTracker Application Load Balancer Security Group" \
            --vpc-id $VPC_ID \
            --tag-specifications 'ResourceType=security-group,Tags=[
              {Key=Name,Value=choppertracker-alb-sg},
              {Key=Project,Value='$PROJECT_TAG'},
              {Key=Environment,Value='$ENVIRONMENT_TAG'},
              {Key=Owner,Value='$OWNER_TAG'},
              {Key=Application,Value='$APPLICATION_TAG'},
              {Key=ManagedBy,Value='$MANAGED_BY_TAG'},
              {Key=CostCenter,Value='$COST_CENTER_TAG'},
              {Key=Component,Value=LoadBalancer}
            ]' \
            --query 'GroupId' --output text)
          echo "Created ALB security group: $ALB_SG_ID"
        else
          echo "ALB security group already exists: $ALB_SG_ID"
        fi
        
        # ECS Security Group  
        ECS_SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=choppertracker-ecs-sg" "Name=vpc-id,Values=$VPC_ID" --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "None")
        if [ "$ECS_SG_ID" = "None" ]; then
          ECS_SG_ID=$(aws ec2 create-security-group \
            --group-name choppertracker-ecs-sg \
            --description "ChopperTracker ECS Tasks Security Group" \
            --vpc-id $VPC_ID \
            --tag-specifications 'ResourceType=security-group,Tags=[
              {Key=Name,Value=choppertracker-ecs-sg},
              {Key=Project,Value='$PROJECT_TAG'},
              {Key=Environment,Value='$ENVIRONMENT_TAG'},
              {Key=Owner,Value='$OWNER_TAG'},
              {Key=Application,Value='$APPLICATION_TAG'},
              {Key=ManagedBy,Value='$MANAGED_BY_TAG'},
              {Key=CostCenter,Value='$COST_CENTER_TAG'},
              {Key=Component,Value=Backend}
            ]' \
            --query 'GroupId' --output text)
          echo "Created ECS security group: $ECS_SG_ID"
        else
          echo "ECS security group already exists: $ECS_SG_ID"
        fi
        
        # ALB security group rules (HTTP/HTTPS from anywhere) - ignore if rules already exist
        aws ec2 authorize-security-group-ingress --group-id $ALB_SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0 || echo "Port 80 rule may already exist"
        aws ec2 authorize-security-group-ingress --group-id $ALB_SG_ID --protocol tcp --port 443 --cidr 0.0.0.0/0 || echo "Port 443 rule may already exist"
        
        # ECS security group rules (from ALB only) - ignore if rules already exist
        aws ec2 authorize-security-group-ingress --group-id $ECS_SG_ID --protocol tcp --port 80 --source-group $ALB_SG_ID || echo "ECS port 80 rule may already exist"
        
        echo "VPC_ID=$VPC_ID" >> deployment_vars.env
        echo "SUBNET1_ID=$SUBNET1_ID" >> deployment_vars.env
        echo "SUBNET2_ID=$SUBNET2_ID" >> deployment_vars.env
        echo "ALB_SG_ID=$ALB_SG_ID" >> deployment_vars.env
        echo "ECS_SG_ID=$ECS_SG_ID" >> deployment_vars.env
        echo "REDIS_SG_ID=$REDIS_SG_ID" >> deployment_vars.env

    - name: Skip ElastiCache Redis (Permissions Issue)
      run: |
        source deployment_vars.env
        
        # Skip Redis for now due to IAM permissions
        # The application can fall back to in-memory storage
        echo "REDIS_ENDPOINT=localhost" >> deployment_vars.env
        echo "Skipping Redis creation due to IAM permissions - using in-memory fallback"

    - name: Build and Push Docker Image
      run: |
        cd BackEnd
        COMMIT_HASH=$(git rev-parse --short HEAD)
        ECR_REPO="choppertracker-backend"
        ECR_URI="${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${ECR_REPO}"
        
        echo "Current AWS identity for ECR:"
        aws sts get-caller-identity
        echo "Using ECR repository: $ECR_URI"
        
        # Login to ECR using dedicated ECR user credentials
        echo "Logging into ECR..."
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
          
          echo "Building Docker image..."
          docker build \
            --build-arg COMMIT_HASH=$COMMIT_HASH \
            --build-arg BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            -t $ECR_URI:latest \
            -t $ECR_URI:$COMMIT_HASH \
            .
          
          echo "Pushing to ECR..."
          docker push $ECR_URI:latest
          docker push $ECR_URI:$COMMIT_HASH
          
          echo "Successfully pushed $ECR_URI:$COMMIT_HASH"
        
        echo "ECR_IMAGE_URI=$ECR_URI:latest" >> ../deployment_vars.env

    - name: Deploy Application Load Balancer
      run: |
        source deployment_vars.env
        
        # Create or get ChopperTracker ALB with proper tagging
        ALB_ARN=$(aws elbv2 describe-load-balancers --names choppertracker-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text 2>/dev/null || echo "None")
        
        if [ "$ALB_ARN" = "None" ]; then
          # Create Application Load Balancer with tags
          ALB_ARN=$(aws elbv2 create-load-balancer \
            --name choppertracker-alb \
            --subnets $SUBNET1_ID $SUBNET2_ID \
            --security-groups $ALB_SG_ID \
            --scheme internet-facing \
            --type application \
            --ip-address-type ipv4 \
            --tags Key=Name,Value=choppertracker-alb \
                   Key=Project,Value=$PROJECT_TAG \
                   Key=Environment,Value=$ENVIRONMENT_TAG \
                   Key=Owner,Value=$OWNER_TAG \
                   Key=Application,Value=$APPLICATION_TAG \
                   Key=ManagedBy,Value=$MANAGED_BY_TAG \
                   Key=CostCenter,Value=$COST_CENTER_TAG \
                   Key=Component,Value=LoadBalancer \
            --query 'LoadBalancers[0].LoadBalancerArn' --output text)
          echo "Created new ALB with ChopperTracker tagging: $ALB_ARN"
        else
          echo "Using existing ALB: $ALB_ARN"
          # Add tags to existing ALB
          aws elbv2 add-tags --resource-arns $ALB_ARN \
            --tags Key=Name,Value=choppertracker-alb \
                   Key=Project,Value=$PROJECT_TAG \
                   Key=Environment,Value=$ENVIRONMENT_TAG \
                   Key=Owner,Value=$OWNER_TAG \
                   Key=Application,Value=$APPLICATION_TAG \
                   Key=ManagedBy,Value=$MANAGED_BY_TAG \
                   Key=CostCenter,Value=$COST_CENTER_TAG \
                   Key=Component,Value=LoadBalancer
        fi
        
        # Get ALB DNS name
        ALB_DNS=$(aws elbv2 describe-load-balancers --load-balancer-arns $ALB_ARN --query 'LoadBalancers[0].DNSName' --output text)
        
        # Create or get ChopperTracker target group with proper tagging
        TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names choppertracker-tg --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null || echo "None")
        
        if [ "$TARGET_GROUP_ARN" = "None" ]; then
          # Create target group with tags
          TARGET_GROUP_ARN=$(aws elbv2 create-target-group \
            --name choppertracker-tg \
            --protocol HTTP \
            --port 80 \
            --vpc-id $VPC_ID \
            --target-type ip \
            --health-check-path /health \
            --health-check-interval-seconds 30 \
            --healthy-threshold-count 2 \
            --unhealthy-threshold-count 5 \
            --tags Key=Name,Value=choppertracker-tg \
                   Key=Project,Value=$PROJECT_TAG \
                   Key=Environment,Value=$ENVIRONMENT_TAG \
                   Key=Owner,Value=$OWNER_TAG \
                   Key=Application,Value=$APPLICATION_TAG \
                   Key=ManagedBy,Value=$MANAGED_BY_TAG \
                   Key=CostCenter,Value=$COST_CENTER_TAG \
                   Key=Component,Value=LoadBalancer \
            --query 'TargetGroups[0].TargetGroupArn' --output text)
          echo "Created new target group with ChopperTracker tagging: $TARGET_GROUP_ARN"
        else
          echo "Using existing target group: $TARGET_GROUP_ARN"
          # Add tags to existing target group
          aws elbv2 add-tags --resource-arns $TARGET_GROUP_ARN \
            --tags Key=Name,Value=choppertracker-tg \
                   Key=Project,Value=$PROJECT_TAG \
                   Key=Environment,Value=$ENVIRONMENT_TAG \
                   Key=Owner,Value=$OWNER_TAG \
                   Key=Application,Value=$APPLICATION_TAG \
                   Key=ManagedBy,Value=$MANAGED_BY_TAG \
                   Key=CostCenter,Value=$COST_CENTER_TAG \
                   Key=Component,Value=LoadBalancer
        fi
        
        # Create HTTP listener if it doesn't exist
        LISTENER_ARN=$(aws elbv2 describe-listeners --load-balancer-arn $ALB_ARN --query 'Listeners[?Port==`80`].ListenerArn' --output text 2>/dev/null || echo "None")
        
        if [ "$LISTENER_ARN" = "None" ] || [ -z "$LISTENER_ARN" ]; then
          echo "Creating HTTP listener..."
          aws elbv2 create-listener \
            --load-balancer-arn $ALB_ARN \
            --protocol HTTP \
            --port 80 \
            --default-actions Type=forward,TargetGroupArn=$TARGET_GROUP_ARN
        else
          echo "HTTP listener already exists: $LISTENER_ARN"
        fi
        
        echo "ALB_ARN=$ALB_ARN" >> deployment_vars.env
        echo "ALB_DNS=$ALB_DNS" >> deployment_vars.env
        echo "TARGET_GROUP_ARN=$TARGET_GROUP_ARN" >> deployment_vars.env
        echo "Application Load Balancer created: $ALB_DNS"

    - name: Deploy ECS Cluster and Service
      run: |
        source deployment_vars.env
        
        # Ensure service-linked roles exist (check first, then create if needed)
        if ! aws iam get-role --role-name AWSServiceRoleForECS >/dev/null 2>&1; then
          echo "Creating ECS service-linked role..."
          aws iam create-service-linked-role --aws-service-name ecs.amazonaws.com
        else
          echo "ECS service-linked role already exists"
        fi
        
        if ! aws iam get-role --role-name AWSServiceRoleForElasticLoadBalancing >/dev/null 2>&1; then
          echo "Creating ELB service-linked role..."
          aws iam create-service-linked-role --aws-service-name elasticloadbalancing.amazonaws.com
        else
          echo "ELB service-linked role already exists"
        fi
        
        # Create or get ChopperTracker ECS cluster with proper tagging
        CLUSTER_NAME="choppertracker-cluster"
        echo "Setting up ECS cluster: $CLUSTER_NAME"
        
        # Check if cluster exists
        if ! aws ecs describe-clusters --clusters $CLUSTER_NAME --query 'clusters[0].clusterName' --output text 2>/dev/null | grep -q "$CLUSTER_NAME"; then
          echo "Creating ECS cluster with ChopperTracker tagging..."
          aws ecs create-cluster \
            --cluster-name $CLUSTER_NAME \
            --capacity-providers FARGATE \
            --default-capacity-provider-strategy capacityProvider=FARGATE,weight=1 \
            --tags Key=Name,Value=$CLUSTER_NAME \
                   Key=Project,Value=$PROJECT_TAG \
                   Key=Environment,Value=$ENVIRONMENT_TAG \
                   Key=Owner,Value=$OWNER_TAG \
                   Key=Application,Value=$APPLICATION_TAG \
                   Key=ManagedBy,Value=$MANAGED_BY_TAG \
                   Key=CostCenter,Value=$COST_CENTER_TAG \
                   Key=Component,Value=Backend
          echo "Created ECS cluster with ChopperTracker tagging"
        else
          echo "ECS cluster already exists: $CLUSTER_NAME"
          # Add tags to existing cluster
          CLUSTER_ARN="arn:aws:ecs:${AWS_REGION}:${AWS_ACCOUNT_ID}:cluster/${CLUSTER_NAME}"
          aws ecs tag-resource --resource-arn $CLUSTER_ARN \
            --tags Key=Name,Value=$CLUSTER_NAME \
                   Key=Project,Value=$PROJECT_TAG \
                   Key=Environment,Value=$ENVIRONMENT_TAG \
                   Key=Owner,Value=$OWNER_TAG \
                   Key=Application,Value=$APPLICATION_TAG \
                   Key=ManagedBy,Value=$MANAGED_BY_TAG \
                   Key=CostCenter,Value=$COST_CENTER_TAG \
                   Key=Component,Value=Backend
        fi
        
        # Wait for cluster to be ready
        sleep 15
        
        # Create execution role for ECS tasks with better error handling
        cat > task-execution-role-policy.json << 'EOF'
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        EOF
        
        # Use ChopperTracker task execution role
        TASK_ROLE_NAME="choppertracker-task-execution-role"
        echo "Using task execution role: $TASK_ROLE_NAME"
        
        # Wait for role to be fully ready (AWS IAM propagation can take time)
        sleep 15
        
        # Use Redis endpoint from environment (fallback to localhost)
        source deployment_vars.env
        echo "Redis endpoint: $REDIS_ENDPOINT"
        
        # Ensure environment variables are available for task definition
        export AWS_ACCOUNT_ID="${{ env.AWS_ACCOUNT_ID }}"
        export AWS_REGION="${{ env.AWS_REGION }}"
        echo "Using Account ID: $AWS_ACCOUNT_ID in Region: $AWS_REGION"
        
        # Get existing role ARN
        ROLE_ARN=$(aws iam get-role --role-name $TASK_ROLE_NAME --query 'Role.Arn' --output text)
        echo "Using task execution role ARN: $ROLE_ARN"
        
        # Verify role exists
        if [ "$ROLE_ARN" = "None" ] || [ -z "$ROLE_ARN" ]; then
          echo "ERROR: Role does not exist or is not accessible"
          exit 1
        fi
        
        # Create CloudWatch log group with ChopperTracker tagging
        LOG_GROUP_NAME="/ecs/choppertracker"
        echo "Setting up CloudWatch log group: $LOG_GROUP_NAME"
        
        if ! aws logs describe-log-groups --log-group-name-prefix $LOG_GROUP_NAME --query "logGroups[?logGroupName=='$LOG_GROUP_NAME']" --output text | grep -q "$LOG_GROUP_NAME"; then
          echo "Creating CloudWatch log group with ChopperTracker tagging..."
          aws logs create-log-group --log-group-name $LOG_GROUP_NAME
          aws logs tag-log-group --log-group-name $LOG_GROUP_NAME \
            --tags Project=$PROJECT_TAG,Environment=$ENVIRONMENT_TAG,Owner=$OWNER_TAG,Application=$APPLICATION_TAG,ManagedBy=$MANAGED_BY_TAG,CostCenter=$COST_CENTER_TAG,Component=Logging
          echo "Created CloudWatch log group with ChopperTracker tagging"
        else
          echo "CloudWatch log group already exists"
          # Add tags to existing log group
          aws logs tag-log-group --log-group-name $LOG_GROUP_NAME \
            --tags Project=$PROJECT_TAG,Environment=$ENVIRONMENT_TAG,Owner=$OWNER_TAG,Application=$APPLICATION_TAG,ManagedBy=$MANAGED_BY_TAG,CostCenter=$COST_CENTER_TAG,Component=Logging
        fi
        
        # Create task definition with updated application image
        cat > task-definition.json << EOF
        {
          "family": "choppertracker-backend",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "${ROLE_ARN}",
          "containerDefinitions": [
            {
              "name": "web-api",
              "image": "$ECR_IMAGE_URI",
              "portMappings": [
                {
                  "containerPort": 80,
                  "protocol": "tcp"
                }
              ],
              "essential": true,
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/choppertracker",
                  "awslogs-region": "${AWS_REGION}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF
        
        # Use ChopperTracker CloudWatch log group
        LOG_GROUP_NAME="/ecs/choppertracker"
        echo "Using CloudWatch log group: $LOG_GROUP_NAME"
        
        # Debug: Show the generated task definition
        echo "Generated task definition:"
        cat task-definition.json
        
        # Register task definition
        echo "Registering task definition..."
        TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Create or update ChopperTracker ECS service
        SERVICE_NAME="choppertracker-backend"
        echo "Managing ECS service: $SERVICE_NAME"
        
        # Check service existence
        if aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].serviceName' --output text 2>/dev/null | grep -q "$SERVICE_NAME"; then
          echo "Service exists, updating with new task definition..."
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition choppertracker-backend
        else
          echo "Service $SERVICE_NAME not found, creating it..."
          
          # Create the service
          aws ecs create-service \
            --cluster $CLUSTER_NAME \
            --service-name $SERVICE_NAME \
            --task-definition choppertracker-backend \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET1_ID,$SUBNET2_ID],securityGroups=[$ECS_SG_ID],assignPublicIp=ENABLED}" \
            --load-balancers "targetGroupArn=$TARGET_GROUP_ARN,containerName=web-api,containerPort=80" \
            --health-check-grace-period-seconds 60
            
          echo "✅ ECS service created successfully"
        fi
        
        echo "ECS service deployed. ALB endpoint: http://$ALB_DNS"

    - name: Update CloudFront distribution
      run: |
        # Get CloudFront distribution ID if exists
        DISTRIBUTION_ID=$(aws cloudfront list-distributions \
          --query "DistributionList.Items[?Comment=='ChopperTracker'].Id" \
          --output text 2>/dev/null || echo "")
        
        echo "CloudFront distribution search result: '$DISTRIBUTION_ID'"
        
        if [ ! -z "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "None" ] && [ "$DISTRIBUTION_ID" != "null" ]; then
          echo "Creating CloudFront invalidation for distribution $DISTRIBUTION_ID"
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"
        else
          echo "No CloudFront distribution found (result: '$DISTRIBUTION_ID')"
        fi

    - name: Output deployment URLs and Cost Tracking Info
      run: |
        source deployment_vars.env
        echo ""
        echo "🎉 ChopperTracker deployment complete in main account with comprehensive tagging!"
        echo ""
        echo "📱 Frontend URL: http://choppertracker-frontend.s3-website-${AWS_REGION}.amazonaws.com"
        echo "🔗 Backend API URL: http://$ALB_DNS"
        echo ""
        echo "💰 Cost Tracking Information:"
        echo "   All ChopperTracker resources are tagged with:"
        echo "   - Project: $PROJECT_TAG"
        echo "   - Environment: $ENVIRONMENT_TAG" 
        echo "   - CostCenter: $COST_CENTER_TAG"
        echo ""
        echo "📊 To view ChopperTracker costs:"
        echo "   1. Go to AWS Cost Explorer"
        echo "   2. Filter by tag: Project = ChopperTracker"
        echo "   3. Set up AWS Budgets with the same tag filter"
        echo ""
        echo "🏷️  Tagged Resources Created/Updated:"
        echo "   - S3 Bucket: choppertracker-frontend"
        echo "   - ECR Repository: choppertracker-backend" 
        echo "   - ALB: choppertracker-alb"
        echo "   - Target Group: choppertracker-tg"
        echo "   - ECS Cluster: choppertracker-cluster"
        echo "   - Security Groups: choppertracker-alb-sg, choppertracker-ecs-sg"
        echo "   - CloudWatch Log Group: /ecs/choppertracker"
        echo ""
        echo "✅ Ready for custom domain setup (choppertracker.com, api.choppertracker.com)"