name: Deploy ChopperTracker

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 038342322731

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install frontend dependencies
      working-directory: ./FrontEnd
      run: npm ci

    - name: Build frontend
      working-directory: ./FrontEnd
      env:
        VITE_API_BASE_URL: https://api.choppertracker.com
      run: npm run build

    - name: Deploy frontend to S3
      run: |
        # Create S3 bucket if it doesn't exist
        aws s3api head-bucket --bucket choppertracker-web-ui 2>/dev/null || \
        aws s3api create-bucket --bucket choppertracker-web-ui --region ${{ env.AWS_REGION }}
        
        # Disable block public access settings
        aws s3api put-public-access-block \
          --bucket choppertracker-web-ui \
          --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
        
        # Enable ACLs on the bucket (required for public access)
        aws s3api put-bucket-ownership-controls \
          --bucket choppertracker-web-ui \
          --ownership-controls Rules=[{ObjectOwnership=BucketOwnerPreferred}]
        
        # Enable static website hosting
        aws s3 website s3://choppertracker-web-ui \
          --index-document index.html \
          --error-document error.html
        
        # Upload files with public-read ACL
        aws s3 sync ./FrontEnd/dist s3://choppertracker-web-ui \
          --delete \
          --acl public-read \
          --cache-control "public, max-age=3600"

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install backend dependencies
      run: |
        cd BackEnd
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Deploy backend API
      run: |
        cd BackEnd
        
        # Install Mangum for FastAPI on Lambda
        pip install mangum
        
        # Create Lambda handler for FastAPI
        cat > lambda_handler.py << 'LAMBDA_EOF'
        from mangum import Mangum
        from src.main import app
        
        # Create the Mangum handler
        handler = Mangum(app)
        
        def lambda_handler(event, context):
            return handler(event, context)
        LAMBDA_EOF
        
        # Package the full application
        zip -r choppertracker-api.zip . -x "*.git*" -x "*__pycache__*" -x "*.pyc" -x "venv/*" -x "logs/*" -x "*.log"
        
        # Get the role ARN dynamically
        ROLE_ARN=$(aws iam get-role --role-name lambda-execution-role --query 'Role.Arn' --output text)
        echo "Using role ARN: $ROLE_ARN"
        
        # Deploy the main API function
        if aws lambda get-function --function-name choppertracker-api >/dev/null 2>&1; then
          echo "Function choppertracker-api exists, updating..."
          aws lambda update-function-code \
            --function-name choppertracker-api \
            --zip-file fileb://choppertracker-api.zip
        else
          echo "Creating function choppertracker-api..."
          aws lambda create-function \
            --function-name choppertracker-api \
            --runtime python3.11 \
            --role "$ROLE_ARN" \
            --handler lambda_handler.lambda_handler \
            --zip-file fileb://choppertracker-api.zip \
            --timeout 30 \
            --memory-size 512 \
            --description "ChopperTracker FastAPI Application" \
            --environment Variables="{ENVIRONMENT=production,CONFIG_FILE=collectors.yaml}"
        fi
        
        # Create Function URL for direct access
        aws lambda create-function-url-config \
          --function-name choppertracker-api \
          --auth-type NONE \
          --cors AllowCredentials=false,AllowHeaders="*",AllowMethods="*",AllowOrigins="*" \
          --invoke-mode BUFFERED \
          2>/dev/null || echo "Function URL already exists"
        
        # Get the Function URL
        FUNCTION_URL=$(aws lambda get-function-url-config --function-name choppertracker-api --query 'FunctionUrl' --output text)
        echo "ChopperTracker API deployed at: $FUNCTION_URL"

    - name: Update CloudFront distribution
      run: |
        # Get CloudFront distribution ID if exists
        DISTRIBUTION_ID=$(aws cloudfront list-distributions \
          --query "DistributionList.Items[?Comment=='ChopperTracker'].Id" \
          --output text)
        
        if [ ! -z "$DISTRIBUTION_ID" ]; then
          echo "Creating CloudFront invalidation for distribution $DISTRIBUTION_ID"
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"
        else
          echo "No CloudFront distribution found"
        fi

    - name: Output deployment URL
      run: |
        echo "Frontend deployed to: http://choppertracker-web-ui.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
        echo "Note: CloudFront distribution will be created separately if needed"